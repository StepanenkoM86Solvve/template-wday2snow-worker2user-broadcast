<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd">

	<!-- In this file you should declare all your inbound endpoints and from 
		here controll the access to your application -->

	<flow name="triggerFlow" processingStrategy="synchronous"
		doc:name="triggerFlow"
		doc:description="This is the simpliest entry point to start the excecution of your Kick
Here you should:
	* Define any inbound endpoint
	* Handle any input parameter and transform it into the expected format by the mainFlow
Here you should not:
	* Run validations against external systems
	* Choose flow of your application based on input parameters">
		<poll doc:name="fireup Worker synchronization">
			<fixed-frequency-scheduler frequency="${poll.frequencyMillis}"
				startDelay="${poll.startDelayMillis}" />
			<watermark variable="lastQueryDate" default-expression="${watermark.defaultExpression}"
				update-expression="#[ new java.util.Date() ]" />
			<processor-chain doc:name="query Workers and set collection">
                <logger message="Fetching Workday updates...#[new java.util.Date()]" level="INFO" doc:name="log 'Fetching workday updates...'"/>
				<wd-hr:get-workers config-ref="Workday_Human_Resource"
					doc:name="get Workers from Workday Human Resource"
					workersRequest-ref="#[org.mule.templates.WorkersRequest.create(lastQueryDate)]"></wd-hr:get-workers>

				<set-payload value="#[payload.responseData == null ? null : payload.responseData.worker]"
					doc:name="set to Worker collection" />
			</processor-chain>
		</poll>
        <set-variable variableName="wdWorker" value="#[payload.get(0)]" doc:name="store worker in variable"/>

        <logger level="INFO" doc:name="log worker's name" message="#[groovy: payload.collect { it.getWorkerData().getPersonalData().getNameData().getPreferredNameData().getNameDetailData().getFirstName() +  ' '+ it.getWorkerData().getPersonalData().getNameData().getPreferredNameData().getNameDetailData().getLastName() } ]"/>
        <batch:execute name="broadcastUsers" doc:name="Batch Execute"/>

		<!-- <batch:execute name="businessLogicBatch1" doc:name="trigger Batch Execute" /> -->
	</flow>

</mule>
