<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

	<!-- In this file you should declare all inbound endpoints of your application -->

	<flow name="triggerFlow" processingStrategy="synchronous"
		
		doc:description="This is the simpliest entry point to start the excecution of your Kick
Here you should:
	* Define any inbound endpoint
	* Handle any input parameter and transform it into the expected format by the mainFlow
Here you should not:
	* Run validations against external systems
	* Choose flow of your application based on input parameters">
		<poll doc:name="fireup Worker synchronization">
			<fixed-frequency-scheduler frequency="${poll.frequencyMillis}"
				startDelay="${poll.startDelayMillis}" />
			<watermark variable="lastQueryDate" default-expression="${watermark.defaultExpression}"  />
			<processor-chain doc:name="query Workers and set collection">
                <logger message="Fetching Workday updates...#[flowVars.lastQueryDate.getTime()]" level="INFO" doc:name="log 'Fetching workday updates...'"/>
                <dw:transform-message doc:name="Create GetWorkersRequestType">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	requestCriteria: {
		excludeInactiveWorkers		: true,
		excludeContingentWorkers	: false,
		excludeEmployees			: false,
		transactionLogCriteriaData: [
			{
				transactionDateRangeData: {
					updatedFrom		: flowVars.lastQueryDate,
					updatedThrough	: now - |PT10S|
				}
			}
		]
	},
	
	responseGroup: {
		includeRoles				: false,
		includePersonalInformation	: true,
		includeOrganizations		: false, 
		includeEmploymentInformation: false,
		includeReference			: false,
		includeTransactionLogData	: false
	}

} as :object {class: "com.workday.hr.GetWorkersRequestType"}
]]></dw:set-payload>
                </dw:transform-message>
				<wd-hr:get-workers config-ref="Workday_Human_Resource" doc:name="get Workers from Workday Human Resource"></wd-hr:get-workers>
                <dw:transform-message doc:name="GetWorkersResponseType to List&lt;Map&gt;">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.responseData.worker map {
	name        : "",
	active      : true,
	firstName   : $.workerData.personalData.nameData.legalNameData.nameDetailData.firstName,
	lastName    : $.workerData.personalData.nameData.legalNameData.nameDetailData.lastName,
	middleName  : $.workerData.personalData.nameData.legalNameData.nameDetailData.middleName default null,
	userName    : $.workerData.userAccountData.userName default null,
	email       : $.workerData.personalData.contactData.emailAddressData[-1].emailAddress when $.workerData.personalData.contactData.emailAddressData != null otherwise null,
	homePhone   : $.workerData.personalData.contactData.phoneData[-1].formattedPhone when $.workerData.personalData.contactData.phoneData != null otherwise null,
	title       : $.workerData.personalData.nameData.preferredNameData.nameDetailData.prefixData.salutationReference.descriptor default null,
	"zip"       : $.workerData.personalData.contactData.addressData[-1].postalCode when $.workerData.personalData.contactData.addressData != null otherwise null,
	street      : $.workerData.personalData.contactData.addressData[-1].addressLineData[-1].value when $.workerData.personalData.contactData.addressData != null otherwise null,
	country     : $.workerData.personalData.contactData.addressData[-1].countryReference.ID[1].value when $.workerData.personalData.contactData.addressData != null otherwise null,
	city        : $.workerData.personalData.contactData.addressData[-1].municipality when $.workerData.personalData.contactData.addressData != null otherwise null,
	state       : $.workerData.personalData.contactData.addressData[-1].countryRegionReference.ID[-1].value when $.workerData.personalData.contactData.addressData != null otherwise null
} unless (payload.responseData is :null) otherwise []]]></dw:set-payload>
                    <dw:set-variable variableName="lastQueryDate"><![CDATA[%dw 1.0
%output application/java
---
payload.requestCriteria.transactionLogCriteriaData[0].transactionDateRangeData.updatedThrough]]></dw:set-variable>
                </dw:transform-message>

			</processor-chain>
		</poll>
        <expression-filter expression="#[payload.size() &gt; 0]" doc:name="Filter empty result set"/>


        <logger level="INFO" doc:name="log worker's name" message="Workday workers: #[payload]"/>
        <batch:execute name="broadcastUsers" doc:name="execute broadcastUsers batch"/>

		
	</flow>

</mule>
